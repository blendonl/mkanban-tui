// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package di

import (
	"mkanban/internal/application/strategy"
	"mkanban/internal/application/usecase/board"
	"mkanban/internal/application/usecase/column"
	"mkanban/internal/application/usecase/session"
	"mkanban/internal/application/usecase/task"
	"mkanban/internal/domain/repository"
	"mkanban/internal/domain/service"
	"mkanban/internal/infrastructure/config"
	"mkanban/internal/infrastructure/external"
	"mkanban/internal/infrastructure/persistence/filesystem"
)

// Injectors from wire.go:

// InitializeContainer sets up all dependencies
func InitializeContainer() (*Container, error) {
	config, err := ProvideConfig()
	if err != nil {
		return nil, err
	}
	boardRepository := ProvideBoardRepository(config)
	validationService := ProvideValidationService(boardRepository)
	boardService := ProvideBoardService(boardRepository, validationService)
	sessionTracker := ProvideSessionTracker()
	vcsProvider := ProvideVCSProvider()
	changeWatcher, err := ProvideChangeWatcher()
	if err != nil {
		return nil, err
	}
	v := ProvideBoardSyncStrategies(vcsProvider, config)
	createBoardUseCase := board.NewCreateBoardUseCase(boardService)
	getBoardUseCase := board.NewGetBoardUseCase(boardRepository)
	listBoardsUseCase := board.NewListBoardsUseCase(boardRepository)
	createColumnUseCase := column.NewCreateColumnUseCase(boardService)
	createTaskUseCase := task.NewCreateTaskUseCase(boardService)
	moveTaskUseCase := task.NewMoveTaskUseCase(boardService)
	updateTaskUseCase := task.NewUpdateTaskUseCase(boardService)
	listTasksUseCase := task.NewListTasksUseCase(boardRepository, config)
	syncSessionBoardUseCase := session.NewSyncSessionBoardUseCase(boardRepository, boardService, validationService, v)
	trackSessionsUseCase := session.NewTrackSessionsUseCase(sessionTracker, syncSessionBoardUseCase)
	getActiveSessionBoardUseCase := session.NewGetActiveSessionBoardUseCase(sessionTracker, boardRepository, v)
	container := &Container{
		Config:                       config,
		BoardRepo:                    boardRepository,
		ValidationService:            validationService,
		BoardService:                 boardService,
		SessionTracker:               sessionTracker,
		VCSProvider:                  vcsProvider,
		ChangeWatcher:                changeWatcher,
		BoardSyncStrategies:          v,
		CreateBoardUseCase:           createBoardUseCase,
		GetBoardUseCase:              getBoardUseCase,
		ListBoardsUseCase:            listBoardsUseCase,
		CreateColumnUseCase:          createColumnUseCase,
		CreateTaskUseCase:            createTaskUseCase,
		MoveTaskUseCase:              moveTaskUseCase,
		UpdateTaskUseCase:            updateTaskUseCase,
		ListTasksUseCase:             listTasksUseCase,
		TrackSessionsUseCase:         trackSessionsUseCase,
		GetActiveSessionBoardUseCase: getActiveSessionBoardUseCase,
		SyncSessionBoardUseCase:      syncSessionBoardUseCase,
	}
	return container, nil
}

// wire.go:

// Container holds all application dependencies
type Container struct {
	// Config
	Config *config.Config

	// Repositories
	BoardRepo repository.BoardRepository

	// Domain Services
	ValidationService *service.ValidationService
	BoardService      *service.BoardService
	SessionTracker    service.SessionTracker
	VCSProvider       service.VCSProvider
	ChangeWatcher     service.ChangeWatcher

	// Strategies
	BoardSyncStrategies []strategy.BoardSyncStrategy

	// Use Cases - Board
	CreateBoardUseCase *board.CreateBoardUseCase
	GetBoardUseCase    *board.GetBoardUseCase
	ListBoardsUseCase  *board.ListBoardsUseCase

	// Use Cases - Column
	CreateColumnUseCase *column.CreateColumnUseCase

	// Use Cases - Task
	CreateTaskUseCase *task.CreateTaskUseCase
	MoveTaskUseCase   *task.MoveTaskUseCase
	UpdateTaskUseCase *task.UpdateTaskUseCase
	ListTasksUseCase  *task.ListTasksUseCase

	// Use Cases - Session
	TrackSessionsUseCase         *session.TrackSessionsUseCase
	GetActiveSessionBoardUseCase *session.GetActiveSessionBoardUseCase
	SyncSessionBoardUseCase      *session.SyncSessionBoardUseCase
}

func ProvideConfig() (*config.Config, error) {
	loader, err := config.NewLoader()
	if err != nil {
		return nil, err
	}
	return loader.Load()
}

func ProvideBoardRepository(cfg *config.Config) repository.BoardRepository {
	return filesystem.NewBoardRepository(cfg.Storage.BoardsPath)
}

func ProvideValidationService(boardRepo repository.BoardRepository) *service.ValidationService {
	return service.NewValidationService(boardRepo)
}

func ProvideBoardService(
	boardRepo repository.BoardRepository,
	validationService *service.ValidationService,
) *service.BoardService {
	return service.NewBoardService(boardRepo, validationService)
}

func ProvideSessionTracker() service.SessionTracker {
	return external.NewTmuxSessionTracker()
}

func ProvideVCSProvider() service.VCSProvider {
	return external.NewGitVCSProvider()
}

func ProvideChangeWatcher() (service.ChangeWatcher, error) {
	return external.NewFSNotifyWatcher()
}

func ProvideBoardSyncStrategies(
	vcsProvider service.VCSProvider,
	cfg *config.Config,
) []strategy.BoardSyncStrategy {
	strategies := make([]strategy.BoardSyncStrategy, 0)

	gitStrategy := strategy.NewGitRepoSyncStrategy(vcsProvider)
	strategies = append(strategies, gitStrategy)

	generalStrategy := strategy.NewGeneralSyncStrategy(cfg.SessionTracking.GeneralBoardName)
	strategies = append(strategies, generalStrategy)

	return strategies
}

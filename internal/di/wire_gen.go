// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package di

import (
	"mkanban/internal/application/usecase/board"
	"mkanban/internal/application/usecase/column"
	"mkanban/internal/application/usecase/task"
	"mkanban/internal/domain/repository"
	"mkanban/internal/domain/service"
	"mkanban/internal/infrastructure/config"
	"mkanban/internal/infrastructure/persistence/filesystem"
)

// Injectors from wire.go:

// InitializeContainer sets up all dependencies
func InitializeContainer() (*Container, error) {
	config, err := ProvideConfig()
	if err != nil {
		return nil, err
	}
	boardRepository := ProvideBoardRepository(config)
	validationService := ProvideValidationService(boardRepository)
	boardService := ProvideBoardService(boardRepository, validationService)
	createBoardUseCase := board.NewCreateBoardUseCase(boardService)
	getBoardUseCase := board.NewGetBoardUseCase(boardRepository)
	listBoardsUseCase := board.NewListBoardsUseCase(boardRepository)
	createColumnUseCase := column.NewCreateColumnUseCase(boardService)
	createTaskUseCase := task.NewCreateTaskUseCase(boardService)
	moveTaskUseCase := task.NewMoveTaskUseCase(boardService)
	updateTaskUseCase := task.NewUpdateTaskUseCase(boardService)
	container := &Container{
		Config:              config,
		BoardRepo:           boardRepository,
		ValidationService:   validationService,
		BoardService:        boardService,
		CreateBoardUseCase:  createBoardUseCase,
		GetBoardUseCase:     getBoardUseCase,
		ListBoardsUseCase:   listBoardsUseCase,
		CreateColumnUseCase: createColumnUseCase,
		CreateTaskUseCase:   createTaskUseCase,
		MoveTaskUseCase:     moveTaskUseCase,
		UpdateTaskUseCase:   updateTaskUseCase,
	}
	return container, nil
}

// wire.go:

// Container holds all application dependencies
type Container struct {
	// Config
	Config *config.Config

	// Repositories
	BoardRepo repository.BoardRepository

	// Domain Services
	ValidationService *service.ValidationService
	BoardService      *service.BoardService

	// Use Cases - Board
	CreateBoardUseCase *board.CreateBoardUseCase
	GetBoardUseCase    *board.GetBoardUseCase
	ListBoardsUseCase  *board.ListBoardsUseCase

	// Use Cases - Column
	CreateColumnUseCase *column.CreateColumnUseCase

	// Use Cases - Task
	CreateTaskUseCase *task.CreateTaskUseCase
	MoveTaskUseCase   *task.MoveTaskUseCase
	UpdateTaskUseCase *task.UpdateTaskUseCase
}

func ProvideConfig() (*config.Config, error) {
	loader, err := config.NewLoader()
	if err != nil {
		return nil, err
	}
	return loader.Load()
}

func ProvideBoardRepository(cfg *config.Config) repository.BoardRepository {
	return filesystem.NewBoardRepository(cfg.Storage.BoardsPath)
}

func ProvideValidationService(boardRepo repository.BoardRepository) *service.ValidationService {
	return service.NewValidationService(boardRepo)
}

func ProvideBoardService(
	boardRepo repository.BoardRepository,
	validationService *service.ValidationService,
) *service.BoardService {
	return service.NewBoardService(boardRepo, validationService)
}
